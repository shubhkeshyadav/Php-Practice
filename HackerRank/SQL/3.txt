=========================================================================================
Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT Country.Continent, FLOOR(AVG(City.Population))
FROM Country, City 
WHERE Country.Code = City.CountryCode 
GROUP BY Country.Continent ;
=========================================================================================


=========================================================================================
You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.

Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

select if(Temp.grade < 8,NULL,Temp.name) AS name,Temp.grade,temp.marks from (select name,(select grade from Grades where A.marks BETWEEN Min_Mark AND Max_Mark) as grade,marks
from Students  A) Temp
ORDER BY Temp.grade DESC,Temp.name
=========================================================================================

=========================================================================================
Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

select h.hacker_id, h.name from Submissions as s join Hackers as h 
on s.hacker_id = h.hacker_id 
join Challenges as c on s.challenge_id = c.challenge_id
join Difficulty as d on c.Difficulty_level = d.Difficulty_level
where s.score = d.score 
group by h.hacker_id, h.name 
having count(*) > 1
order by count(*) desc, h.hacker_id;
=========================================================================================

=========================================================================================
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT
  CASE
    WHEN A + B > C AND A+C>B AND B+C>A THEN 
      CASE
        WHEN A = B AND B = C THEN 'Equilateral' 
        WHEN A = B OR B = C OR A = C THEN 'Isosceles' 
        ELSE 'Scalene' 
      END 
    ELSE 'Not A Triangle' 
  END FROM TRIANGLES;
=========================================================================================

=========================================================================================
Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:


(Select concat(Name,'(',substring(OCCUPATION,1,1),')') AS name from OCCUPATIONS
order by Name)

UNION ALL

(select Temp.Name from (Select count(OCCUPATION) as total,OCCUPATION,concat('There are a total of ',count(OCCUPATION),' ',lower(OCCUPATION),'s.') as Name from OCCUPATIONS
group by OCCUPATION
) AS temp order by total,OCCUPATION)
order by name
=========================================================================================

set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(
        select 
        case 
            when Occupation="Doctor" then (@r1:=@r1+1)
            when Occupation="Professor" then (@r2:=@r2+1) 
            when Occupation="Singer" then (@r3:=@r3+1) 
            when Occupation="Actor" then (@r4:=@r4+1) 
        end as RowNumber,

        case when Occupation="Doctor" then Name end as Doctor,
        case when Occupation="Professor" then Name end as Professor,
        case when Occupation="Singer" then Name end as Singer,
        case when Occupation="Actor" then Name end as Actor
from OCCUPATIONS order by Name
) Temp group by RowNumber;